// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.
#ifndef __Calc_hh__
#define __Calc_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_Calc
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_Calc
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_Calc
#endif






#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif





class DivByZero : public ::CORBA::UserException {
public:
  
  ::CORBA::Long dividend;



  inline DivByZero() {
    pd_insertToAnyFn    = insertToAnyFn;
    pd_insertToAnyFnNCP = insertToAnyFnNCP;
  }
  DivByZero(const DivByZero&);
  DivByZero(::CORBA::Long i_dividend);
  DivByZero& operator=(const DivByZero&);
  virtual ~DivByZero();
  virtual void _raise() const;
  static DivByZero* _downcast(::CORBA::Exception*);
  static const DivByZero* _downcast(const ::CORBA::Exception*);
  static inline DivByZero* _narrow(::CORBA::Exception* _e) {
    return _downcast(_e);
  }
  
  void operator>>=(cdrStream&) const ;
  void operator<<=(cdrStream&) ;

  static _core_attr insertExceptionToAny    insertToAnyFn;
  static _core_attr insertExceptionToAnyNCP insertToAnyFnNCP;

  virtual ::CORBA::Exception* _NP_duplicate() const;

  static _core_attr const char* _PD_repoId;
  static _core_attr const char* _PD_typeId;

private:
  virtual const char* _NP_typeId() const;
  virtual const char* _NP_repoId(int*) const;
  virtual void _NP_marshal(cdrStream&) const;
};

#ifndef __Calc__
#define __Calc__

class Calc;
class _objref_Calc;
class _impl_Calc;

typedef _objref_Calc* Calc_ptr;
typedef Calc_ptr CalcRef;

class Calc_Helper {
public:
  typedef Calc_ptr _ptr_type;

  static _ptr_type _nil();
  static _CORBA_Boolean is_nil(_ptr_type);
  static void release(_ptr_type);
  static void duplicate(_ptr_type);
  static void marshalObjRef(_ptr_type, cdrStream&);
  static _ptr_type unmarshalObjRef(cdrStream&);
};

typedef _CORBA_ObjRef_Var<_objref_Calc, Calc_Helper> Calc_var;
typedef _CORBA_ObjRef_OUT_arg<_objref_Calc,Calc_Helper > Calc_out;

#endif

// interface Calc
class Calc {
public:
  // Declarations for this interface type.
  typedef Calc_ptr _ptr_type;
  typedef Calc_var _var_type;

  static _ptr_type _duplicate(_ptr_type);
  static _ptr_type _narrow(::CORBA::Object_ptr);
  static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
  
  static _ptr_type _nil();

  static inline void _marshalObjRef(_ptr_type, cdrStream&);

  static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
    omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
    if (o)
      return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
    else
      return _nil();
  }

  static _core_attr const char* _PD_repoId;

  // Other IDL defined within this scope.
  
};

class _objref_Calc :
  public virtual ::CORBA::Object,
  public virtual omniObjRef
{
public:
  ::CORBA::Long add(::CORBA::Long x, ::CORBA::Long y);
  ::CORBA::Long subtr(::CORBA::Long x, ::CORBA::Long y);
  ::CORBA::Long mult(::CORBA::Long x, ::CORBA::Long y);
  ::CORBA::Long div(::CORBA::Long x, ::CORBA::Long y);

  inline _objref_Calc()  { _PR_setobj(0); }  // nil
  _objref_Calc(omniIOR*, omniIdentity*);

protected:
  virtual ~_objref_Calc();

  
private:
  virtual void* _ptrToObjRef(const char*);

  _objref_Calc(const _objref_Calc&);
  _objref_Calc& operator = (const _objref_Calc&);
  // not implemented

  friend class Calc;
};

class _pof_Calc : public _OMNI_NS(proxyObjectFactory) {
public:
  inline _pof_Calc() : _OMNI_NS(proxyObjectFactory)(Calc::_PD_repoId) {}
  virtual ~_pof_Calc();

  virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
  virtual _CORBA_Boolean is_a(const char*) const;
};

class _impl_Calc :
  public virtual omniServant
{
public:
  virtual ~_impl_Calc();

  virtual ::CORBA::Long add(::CORBA::Long x, ::CORBA::Long y) = 0;
  virtual ::CORBA::Long subtr(::CORBA::Long x, ::CORBA::Long y) = 0;
  virtual ::CORBA::Long mult(::CORBA::Long x, ::CORBA::Long y) = 0;
  virtual ::CORBA::Long div(::CORBA::Long x, ::CORBA::Long y) = 0;
  
public:  // Really protected, workaround for xlC
  virtual _CORBA_Boolean _dispatch(omniCallHandle&);

private:
  virtual void* _ptrToInterface(const char*);
  virtual const char* _mostDerivedRepoId();
  
};




class POA_Calc :
  public virtual _impl_Calc,
  public virtual ::PortableServer::ServantBase
{
public:
  virtual ~POA_Calc();

  inline ::Calc_ptr _this() {
    return (::Calc_ptr) _do_this(::Calc::_PD_repoId);
  }
};







#undef _core_attr
#undef _dyn_attr



inline void
Calc::_marshalObjRef(::Calc_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}




#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_Calc
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_Calc
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_Calc
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_Calc
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_Calc
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_Calc
#endif

#endif  // __Calc_hh__

