// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.

#include "Calc.hh"
#include <omniORB4/IOP_S.h>
#include <omniORB4/IOP_C.h>
#include <omniORB4/callDescriptor.h>
#include <omniORB4/callHandle.h>
#include <omniORB4/objTracker.h>


OMNI_USING_NAMESPACE(omni)

static const char* _0RL_library_version = omniORB_4_1;



::CORBA::Exception::insertExceptionToAny DivByZero::insertToAnyFn = 0;
::CORBA::Exception::insertExceptionToAnyNCP DivByZero::insertToAnyFnNCP = 0;

DivByZero::DivByZero(const DivByZero& _s) : ::CORBA::UserException(_s)
{
  dividend = _s.dividend;

}

DivByZero::DivByZero(::CORBA::Long _dividend)
{
  pd_insertToAnyFn    = DivByZero::insertToAnyFn;
  pd_insertToAnyFnNCP = DivByZero::insertToAnyFnNCP;
  dividend = _dividend;

}



DivByZero& DivByZero::operator=(const DivByZero& _s)
{
  ((::CORBA::UserException*) this)->operator=(_s);
  dividend = _s.dividend;

  return *this;
}

DivByZero::~DivByZero() {}

void DivByZero::_raise() const { throw *this; }

const char* DivByZero::_PD_repoId = "IDL:DivByZero:1.0";
const char* DivByZero::_PD_typeId = "Exception/UserException/DivByZero";

DivByZero* DivByZero::_downcast(::CORBA::Exception* _e) {
  return (DivByZero*) _NP_is_a(_e, _PD_typeId);
}

const DivByZero* DivByZero::_downcast(const ::CORBA::Exception* _e) {
  return (const DivByZero*) _NP_is_a(_e, _PD_typeId);
}

::CORBA::Exception* DivByZero::_NP_duplicate() const {
  return new DivByZero(*this);
}

const char* DivByZero::_NP_typeId() const {
  return _PD_typeId;
}

const char* DivByZero::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:DivByZero:1.0");
  return _PD_repoId;
}
 
void DivByZero::_NP_marshal(cdrStream& _s) const {
  *this >>= _s;
}

void
DivByZero::operator>>= (cdrStream& _n) const
{
  dividend >>= _n;

}

void
DivByZero::operator<<= (cdrStream& _n)
{
  (::CORBA::Long&)dividend <<= _n;

}

Calc_ptr Calc_Helper::_nil() {
  return ::Calc::_nil();
}

::CORBA::Boolean Calc_Helper::is_nil(::Calc_ptr p) {
  return ::CORBA::is_nil(p);

}

void Calc_Helper::release(::Calc_ptr p) {
  ::CORBA::release(p);
}

void Calc_Helper::marshalObjRef(::Calc_ptr obj, cdrStream& s) {
  ::Calc::_marshalObjRef(obj, s);
}

Calc_ptr Calc_Helper::unmarshalObjRef(cdrStream& s) {
  return ::Calc::_unmarshalObjRef(s);
}

void Calc_Helper::duplicate(::Calc_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

Calc_ptr
Calc::_duplicate(::Calc_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

Calc_ptr
Calc::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


Calc_ptr
Calc::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

Calc_ptr
Calc::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_Calc _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_Calc* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_Calc;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* Calc::_PD_repoId = "IDL:Calc:1.0";


_objref_Calc::~_objref_Calc() {
  
}


_objref_Calc::_objref_Calc(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::Calc::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
_objref_Calc::_ptrToObjRef(const char* id)
{
  if( id == ::Calc::_PD_repoId )
    return (::Calc_ptr) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::Calc::_PD_repoId) )
    return (::Calc_ptr) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _clong_i_clong_i_clong
class _0RL_cd_d13b3c3446278bdf_00000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_d13b3c3446278bdf_00000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::Long arg_0;
  ::CORBA::Long arg_1;
  ::CORBA::Long result;
};

void _0RL_cd_d13b3c3446278bdf_00000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;
  arg_1 >>= _n;

}

void _0RL_cd_d13b3c3446278bdf_00000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Long&)arg_0 <<= _n;
  (::CORBA::Long&)arg_1 <<= _n;

}

void _0RL_cd_d13b3c3446278bdf_00000000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;

}

void _0RL_cd_d13b3c3446278bdf_00000000::unmarshalReturnedValues(cdrStream& _n)
{
  (::CORBA::Long&)result <<= _n;

}

const char* const _0RL_cd_d13b3c3446278bdf_00000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_d13b3c3446278bdf_10000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_d13b3c3446278bdf_00000000* tcd = (_0RL_cd_d13b3c3446278bdf_00000000*)cd;
  _impl_Calc* impl = (_impl_Calc*) svnt->_ptrToInterface(Calc::_PD_repoId);
  tcd->result = impl->add(tcd->arg_0, tcd->arg_1);


}

::CORBA::Long _objref_Calc::add(::CORBA::Long x, ::CORBA::Long y)
{
  _0RL_cd_d13b3c3446278bdf_00000000 _call_desc(_0RL_lcfn_d13b3c3446278bdf_10000000, "add", 4);
  _call_desc.arg_0 = x;
  _call_desc.arg_1 = y;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_d13b3c3446278bdf_20000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_d13b3c3446278bdf_00000000* tcd = (_0RL_cd_d13b3c3446278bdf_00000000*)cd;
  _impl_Calc* impl = (_impl_Calc*) svnt->_ptrToInterface(Calc::_PD_repoId);
  tcd->result = impl->subtr(tcd->arg_0, tcd->arg_1);


}

::CORBA::Long _objref_Calc::subtr(::CORBA::Long x, ::CORBA::Long y)
{
  _0RL_cd_d13b3c3446278bdf_00000000 _call_desc(_0RL_lcfn_d13b3c3446278bdf_20000000, "subtr", 6);
  _call_desc.arg_0 = x;
  _call_desc.arg_1 = y;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_d13b3c3446278bdf_30000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_d13b3c3446278bdf_00000000* tcd = (_0RL_cd_d13b3c3446278bdf_00000000*)cd;
  _impl_Calc* impl = (_impl_Calc*) svnt->_ptrToInterface(Calc::_PD_repoId);
  tcd->result = impl->mult(tcd->arg_0, tcd->arg_1);


}

::CORBA::Long _objref_Calc::mult(::CORBA::Long x, ::CORBA::Long y)
{
  _0RL_cd_d13b3c3446278bdf_00000000 _call_desc(_0RL_lcfn_d13b3c3446278bdf_30000000, "mult", 5);
  _call_desc.arg_0 = x;
  _call_desc.arg_1 = y;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _clong_i_clong_i_clong_e_cDivByZero
class _0RL_cd_d13b3c3446278bdf_40000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_d13b3c3446278bdf_40000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::Long arg_0;
  ::CORBA::Long arg_1;
  ::CORBA::Long result;
};

void _0RL_cd_d13b3c3446278bdf_40000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;
  arg_1 >>= _n;

}

void _0RL_cd_d13b3c3446278bdf_40000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Long&)arg_0 <<= _n;
  (::CORBA::Long&)arg_1 <<= _n;

}

void _0RL_cd_d13b3c3446278bdf_40000000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;

}

void _0RL_cd_d13b3c3446278bdf_40000000::unmarshalReturnedValues(cdrStream& _n)
{
  (::CORBA::Long&)result <<= _n;

}

const char* const _0RL_cd_d13b3c3446278bdf_40000000::_user_exns[] = {
  DivByZero::_PD_repoId
};

void _0RL_cd_d13b3c3446278bdf_40000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, DivByZero::_PD_repoId) ) {
    DivByZero _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_d13b3c3446278bdf_50000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_d13b3c3446278bdf_40000000* tcd = (_0RL_cd_d13b3c3446278bdf_40000000*)cd;
  _impl_Calc* impl = (_impl_Calc*) svnt->_ptrToInterface(Calc::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->div(tcd->arg_0, tcd->arg_1);
#else
  if (!cd->is_upcall())
    tcd->result = impl->div(tcd->arg_0, tcd->arg_1);
  else {
    try {
      tcd->result = impl->div(tcd->arg_0, tcd->arg_1);
    }
    catch(DivByZero& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::Long _objref_Calc::div(::CORBA::Long x, ::CORBA::Long y)
{
  _0RL_cd_d13b3c3446278bdf_40000000 _call_desc(_0RL_lcfn_d13b3c3446278bdf_50000000, "div", 4);
  _call_desc.arg_0 = x;
  _call_desc.arg_1 = y;

  _invoke(_call_desc);
  return _call_desc.result;


}
_pof_Calc::~_pof_Calc() {}


omniObjRef*
_pof_Calc::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::_objref_Calc(ior, id);
}


::CORBA::Boolean
_pof_Calc::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::Calc::_PD_repoId) )
    return 1;
  
  return 0;
}

const _pof_Calc _the_pof_Calc;

_impl_Calc::~_impl_Calc() {}


::CORBA::Boolean
_impl_Calc::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "add") ) {

    _0RL_cd_d13b3c3446278bdf_00000000 _call_desc(_0RL_lcfn_d13b3c3446278bdf_10000000, "add", 4, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "subtr") ) {

    _0RL_cd_d13b3c3446278bdf_00000000 _call_desc(_0RL_lcfn_d13b3c3446278bdf_20000000, "subtr", 6, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "mult") ) {

    _0RL_cd_d13b3c3446278bdf_00000000 _call_desc(_0RL_lcfn_d13b3c3446278bdf_30000000, "mult", 5, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "div") ) {

    _0RL_cd_d13b3c3446278bdf_40000000 _call_desc(_0RL_lcfn_d13b3c3446278bdf_50000000, "div", 4, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
_impl_Calc::_ptrToInterface(const char* id)
{
  if( id == ::Calc::_PD_repoId )
    return (::_impl_Calc*) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::Calc::_PD_repoId) )
    return (::_impl_Calc*) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
_impl_Calc::_mostDerivedRepoId()
{
  return ::Calc::_PD_repoId;
}

POA_Calc::~POA_Calc() {}

